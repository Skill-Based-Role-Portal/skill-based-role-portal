name: Deploy to Amazon ECS

on:
  workflow_run:
    workflows: ["docker-image"]
    types:
      - completed

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO }}
  ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE_ARN }}
  ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER_ARN }}
  ECS_TASK_DEFINITION: ./spm-run-revision.json

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configuration of AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to ECR
        id: ECR-login
        run: |
          ${{ secrets.AWS_ECR_LOGIN }}

      - name: Pull and tag images from CI Pipeline
        id: pull-and-tag-built-images
        run: |
          tag=("1.0")
          images=("application" "skill" "staff" "frontend" "role")

          for image in "${images[@]}"; do
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${image}:${tag}
            docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${image}:${tag} ${{ env.ECR_REPOSITORY }}:${image}
            docker push ${{ env.ECR_REPOSITORY }}:${image}
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          done

      - name: Render Amazon ECS task definition for app container
        id: render-application-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: application-1
          image: ${{env.ECR_REPOSITORY}}:application
          environment-variables: |
              LOG_LEVEL=info
              ENVIRONMENT=prod
          docker-labels: |
              SERVICE=service
              VERSION=version
  
      - name: Modify Amazon ECS task definition with skill container
        id: render-skill-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: skill-1
          image: ${{env.ECR_REPOSITORY}}:skill

      - name: Modify Amazon ECS task definition with staff container
        id: render-staff-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: staff-1
          image: ${{env.ECR_REPOSITORY}}:staff

      - name: Modify Amazon ECS task definition with frontend container
        id: render-frontend-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: frontend-1
          image: ${{env.ECR_REPOSITORY}}:frontend

      - name: Modify Amazon ECS task definition with role container
        id: render-role-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: role
          image: ${{env.ECR_REPOSITORY}}:role

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-role-container.outputs.task-definition }} # Takes last rendered
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true